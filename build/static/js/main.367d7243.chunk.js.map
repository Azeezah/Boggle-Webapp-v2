{"version":3,"sources":["Board.js","boggle_solver.js","Score.js","Timer.js","Game.js","App.js","index.js"],"names":["Board","board","this","props","react_default","a","createElement","class","map","row","i","elem","j","key","Component","deltas","path_to_str","grid","start","path","width","height","_start","Object","slicedToArray","x","y","word","seen","Set","join","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","undefined","_step3","_iterator3","Symbol","iterator","next","done","direction","value","_deltas$direction","dx","dy","has","add","push","err","return","toUpperCase","findAllSolutions","dictionary","length","valid_words","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","answers","prefixes","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","len","slice","go_back","num_directions","pop","input","output","results","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","w","preserve_input_format","Score","words","total","num_correct","filter","correct","text","Timer","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","decrement","setState","secondsLeft","state","seconds","setInterval","Game","changeGuess","e","defineProperty","target","name","submitGuess","preventDefault","guess","guesses","correctGuesses","allSolutions","includes","alert","concat","toConsumableArray","finishGame","scoredWords","isFinished","chars","cube","Math","floor","random","sort","col","RandomGrid","solutions","setTimeout","_this2","item","src_Timer","src_Board_0","onClick","autocomplete","onChange","hidden","src_Score_0","App","startPlaying","playing","stopPlaying","startButton","stopButton","src_Game","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.367d7243.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Board.css';\n\nclass Board extends Component {\n  render() {\n    const board = this.props.board;\n    return (\n      <div class=\"board\">\n      <table>\n      {board.map((row, i) => {\n        return (\n          <tr>\n          {row.map((elem, j)=>{\n            return <td key={i}>{elem}</td>\n          })}\n          </tr>)})}\n      </table>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","function findAllSolutions(grid, dictionary) {\n  if (!grid || !grid.length || !grid[0].length || !dictionary || !dictionary.length) {\n    return []\n  }\n  const height = grid.length\n  const width = grid[0].length\n  const num_directions = 8  // There're 8 valid directions: top, topright, right, etc.\n  let valid_words = new Set()\n  for (var word of dictionary) {\n    if (word.length >= 3) {\n      valid_words.add(word.toUpperCase())\n    }\n  }\n  let answers = new Set()\n  let prefixes = new Set()\n  for (word of valid_words) {\n    for (var len=1; len<=word.length; len++) {\n      prefixes.add(word.slice(0,len))\n    }\n  }\n  // For each cell in the grid, do depth-first-search to find valid words.\n  for (var x=0; x<width; x++) {\n    for (var y=0; y<height; y++) {\n      let path = [0]  // List (stack) of directions numbered 0-7.\n      let go_back = false\n      while (path.length > 0) {\n        word = path_to_str(grid, [x,y], path, width, height)\n        if (valid_words.has(word)) {\n          answers.add(word)\n        }\n        if (!prefixes.has(word) || go_back) {\n          if (path[path.length-1] === num_directions-1) {\n            path.pop()\n            go_back = true\n          }\n          else {\n            path[path.length-1]++  // Change direction of last step.\n            go_back = false\n          }\n        } else {\n          path.push(0)  // Add step going in direction `0`.\n        }\n      }\n    }\n  }\n  return preserve_input_format(dictionary, answers)\n}\n\n// Deltas are changes in coordinates cooresponding to given directions.\nconst deltas = [[0, 1], [1, 1], [1, 0], [1, -1],\n                [0, -1], [-1, -1], [-1, 0], [-1, 1]]\n\nfunction path_to_str(grid, start, path, width, height){\n  // Converts path (a list of numbered directions) to the corresponding string.\n  // So 0 is up, 1 is up-right, 2 is right, and so on.  The order is specified in the deltas list.\n  // Example: if start=[0, 2], path=[0, 1, 2], and grid is as follows, then output string is \"abcd\".\n  //  [['.', 'c', 'd'],\n  //   ['b', '.', '.'],\n  //   ['a', '.', '.']]\n  let [x, y] = start\n  let word = [grid[y][x]]\n  let seen = new Set([start.join(';')])\n  for (var direction of path) {\n    var [dx, dy] = deltas[direction]\n    x += dx\n    y += dy\n    if (seen.has(x+';'+y) ||\n        !(0 <= y && y < height && 0 <= x && x < width)) {\n      return \"\"\n    }\n\n    // We create pairs (x,y) with a string instead of an array since arrays aren't hashable.\n    seen.add(x+';'+y)\n    word.push(grid[y][x])\n  }\n  return word.join('').toUpperCase()\n}\n\nfunction preserve_input_format(input, output) {\n  // Maintain order and casing of input dictionary.\n  let results = []\n  for (var w of input) {\n    if (output.has(w.toUpperCase())) {\n      results.push(w)\n    }\n  }\n  return results\n}\n\nexport default findAllSolutions;\n","import React, { Component } from 'react';\nimport './Score.css';\n\nclass Score extends Component {\n  render() {\n    const words = this.props.words;\n    const total = words.length;\n    const num_correct = words.filter(w=>w.correct).length\n    return (\n      <div class=\"wordlist\">\n      You found {num_correct} words of {total} total!\n      {words.map((word, i) => {\n        return <div class={word.correct?\"correct\":\"incorrect\"}>{word.text}</div>\n      })}\n      </div>\n    );\n  }\n}\n\nexport default Score;\n"," import React, { Component } from 'react';\n import './Score.css';\n\n class Timer extends Component {\n   constructor(props) {\n    super(props);\n    this.state = { secondsLeft: this.props.seconds }\n    setInterval(this.decrement, 1000)  // 1 second\n   }\n   decrement = () => {\n     this.setState({secondsLeft:this.state.secondsLeft ? this.state.secondsLeft - 1 : 0})\n   }\n   render() {\n     return (\n       <div class=\"timer\">\n         { this.state.secondsLeft\n           ? <span>You have {this.state.secondsLeft} seconds left.</span>\n           : <span>Time's Up!</span>\n         }\n       </div>\n     );\n   }\n }\n\n export default Timer;\n","import React, {Component} from 'react';\nimport Board from './Board';\nimport findAllSolutions from'./boggle_solver';\nimport valid_words from './full-wordlist';\nimport Score from './Score';\nimport Timer from './Timer';\n\n// Returns a random 5x5 board, using the official letter distribution.\nfunction RandomGrid() {\n   // prettier-ignore\n   const dice = [\"AAAFRS\", \"AAEEEE\", \"AAFIRS\", \"ADENNN\", \"AEEEEM\",\n                 \"AEEGMU\", \"AEGMNN\", \"AFIRSY\", \"BJKQXZ\", \"CCNSTW\",\n                 \"CEIILT\", \"CEILPT\", \"CEIPST\", \"DHHNOT\", \"DHHLOR\",\n                 \"DHLNOR\", \"DDLNOR\", \"EIIITT\", \"EMOTTT\", \"ENSSSU\",\n                 \"FIPRSY\", \"GORRVW\", \"HIPRRY\", \"NOOTUW\", \"OOOTTU\"];\n   let chars = dice.map(cube => cube[Math.floor(Math.random() * cube.length)]);\n   chars.sort(() => Math.random() - 0.5); // Shuffle the letters.\n\n   const SIZE = 5;\n   let grid = [];\n   for (let row = 0; row < SIZE; row++) {\n     grid[row] = [];\n     for (let col = 0; col < SIZE; ++col) {\n       grid[row][col] = chars[SIZE * row + col];\n       if (grid[row][col] === \"Q\") grid[row][col] = \"Qu\";\n     }\n   }\n   return grid;\n}\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    const grid = RandomGrid()\n    const solutions = new Set(findAllSolutions(grid, valid_words['words']))\n    this.state = {\n      guess: '',\n      correctGuesses: [],\n      guesses: [],\n      grid: grid,\n      allSolutions: solutions,\n      scoredWords:[],\n      isFinished:false,\n      seconds: 30,\n    };\n    setTimeout(this.finishGame, this.state.seconds*1000)\n  }\n  changeGuess = (e) => {\n    this.setState({[e.target.name]:e.target.value})\n  }\n  submitGuess = (e) => {\n    e.preventDefault();\n    const guess = this.state.guess\n    const guesses = this.state.guesses\n    const correctGuesses = this.state.correctGuesses\n    const allSolutions = this.state.allSolutions\n    if (guesses.includes(guess)) {\n      alert(\"You said that already!\");\n    }\n    else if (allSolutions.has(guess)) {\n      this.setState({correctGuesses:[...correctGuesses, guess]})\n    }\n    this.setState({guesses:[...guesses, guess]})\n    this.setState({guess: ''})\n  }\n\n  finishGame = () => {\n    const allSolutions = this.state.allSolutions\n    const correctGuesses = this.state.correctGuesses\n    var scoredWords = []\n    for (var word of allSolutions) {\n      if (correctGuesses.includes(word)) {\n        scoredWords.push({correct:true, text:word})\n      } else {\n        scoredWords.push({correct:false, text:word})\n      }\n    }\n    this.setState({scoredWords:scoredWords})\n    this.setState({isFinished:true})\n  }\n  render() {\n    const correctGuesses = this.state.correctGuesses.map((item, key)=>\n      <span>{item}<br /></span>\n    );\n    const isFinished = this.state.isFinished;\n    const scoredWords = this.state.scoredWords;\n\n    return (\n      <div>\n        <Timer seconds={this.state.seconds} />\n        <Board board={this.state.grid}/>\n        <button onClick={this.finishGame}>Stop</button>\n        <form autocomplete=\"off\">\n          <input\n            name='guess'\n            value={this.state.guess}\n            onChange={(e) => this.changeGuess(e)} />\n          <button hidden onClick={(e) => this.submitGuess(e)}>Guess</button>\n        </form>\n        {isFinished ? <Score words={scoredWords} /> : correctGuesses}\n      </div>\n    )\n  }\n}\n\nexport default Game;\n","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Game from './Game';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {playing:false}\n  }\n  startPlaying = () => {this.setState({playing:true})}\n  stopPlaying = () => {this.setState({playing:false})}\n\n  render() {\n    const startButton = (<button onClick={this.startPlaying}>Start</button>)\n    const stopButton = (<button onClick={this.stopPlaying}>Home</button>)\n    return (\n      <div class=\"app\">\n      <center>\n        <h1 class=\"appTitle\">BOGGLE</h1>\n        { this.state.playing ? stopButton : startButton }\n        { this.state.playing ? <Game /> : null }\n      </center>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}